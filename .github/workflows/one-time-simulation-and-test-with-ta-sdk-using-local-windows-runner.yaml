name: One-Time Simulation and Test with TA SDK using Local Windows Runner

on:
  workflow_dispatch:
    inputs:
      template-vmid:
        description: 'Template VM ID to clone from'
        type: string
        required: true
      vm-name:
        description: 'Name for the new VM'
        type: string
        required: true
      cpu-cores:
        description: 'Number of CPU cores'
        type: choice
        required: false
        default: '4'
        options:
          - '2'
          - '4'
          - '8'
      memory:
        description: 'Memory size in MB'
        type: choice
        required: false
        default: '4096'
        options:
          - '4096'
          - '8192'
          - '16384'
      disk-size:
        description: 'Disk size in GB'
        type: number
        required: false
        default: 100
      shutdown-behavior:
        description: 'Shutdown Behavior for Proxmox VM'
        type: choice
        required: false
        default: 'terminate'
        options:
          - 'terminate'
          - 'stop'
      failed-job-not-terminate:
        description: 'Do NOT terminate (delete) VM when the job fails'
        type: boolean
        required: false
        default: true
      # Add any additional parameters needed for your dSPACE job
      python-sdk-dir:
        description: 'Python SDK Directory'
        type: string
        required: false
        default: 'PythonSDK_Turnlamp' # Replace with your default value
      openta-testenv-config-file:
        description: 'OpenTA TestEnv Config File'
        type: string
        required: false
        default: 'testdata/testenv_veos.yaml' # Replace with your default value

permissions:
  contents: write
  actions: write
  checks: write
  pages: write
  id-token: write

jobs:
  start-runner:
    name: Start One-Time Proxmox Windows Runner
    runs-on: local-ubuntu-latest
    outputs:
      vm-id: ${{ steps.start-proxmox-runner.outputs.vm-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time Proxmox Windows Runner
        id: start-proxmox-runner
        uses: ./.github/actions/start-one-time-windows-proxmox-runner
        with:
          proxmox-host: ${{ secrets.PROXMOX_HOST }}
          proxmox-token-id: ${{ secrets.PROXMOX_TOKEN_ID }}
          proxmox-token-secret: ${{ secrets.PROXMOX_TOKEN_SECRET }}
          proxmox-node: ${{ vars.PROXMOX_NODE }}
          template-vmid: ${{ inputs.template-vmid }}
          vm-name: ${{ inputs.vm-name }}
          cpu-cores: ${{ inputs.cpu-cores }}
          memory: ${{ inputs.memory }}
          disk-size: ${{ inputs.disk-size }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          runner-labels: one-time-dspace-simulation-and-test-${{ github.run_id }}
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-proxmox-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY

  run-dspace-simulation-and-test:
    name: Run dSPACE Simulation and Test
    needs: start-runner
    runs-on: one-time-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python SDK Directory | \`${{ inputs.python-sdk-dir}}\` |"
            echo "| ⚙️ OpenTA TestEnv Config File | \`${{ inputs.openta-testenv-config-file }}\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"

          # Add dSPACE license server to CodeMeter Server Search List
          Write-Host "Adding dSPACE license server to CodeMeter Server Search List ..."
          Start-Process -FilePath "C:\Program Files (x86)\CodeMeter\Runtime\bin\cmu32.exe" -ArgumentList "--add-server ${{ vars.LOCAL_DSPACE_LICENSE_SERVER }}" -Wait -NoNewWindow

          # Install uv
          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          # Start VEOS
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          
          # Run pytest with Allure Results
          cd "${{ inputs.python-sdk-dir }}"
          uv sync
          uv run pytest .\tests --openta-testenv-config="${{ inputs.openta-testenv-config-file }}" --alluredir=allure-results

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: ${{ inputs.python-sdk-dir }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  stop-runner:
    name: Stop Proxmox Runner
    needs:
      - start-runner
      - run-dspace-simulation-and-test
    runs-on: local-ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop Proxmox runner
        uses: ./.github/actions/stop-proxmox-runner
        with:
          proxmox-host: ${{ secrets.PROXMOX_HOST }}
          proxmox-token-id: ${{ secrets.PROXMOX_TOKEN_ID }}
          proxmox-token-secret: ${{ secrets.PROXMOX_TOKEN_SECRET }}
          proxmox-node: ${{ vars.PROXMOX_NODE }}
          vm-id: ${{ needs.start-runner.outputs.vm-id }}
          shutdown-behavior: ${{ inputs.shutdown-behavior }}
          job-result: ${{ needs.run-dspace-simulation-and-test.result }}
          failed-job-not-terminate: ${{ inputs.failed-job-not-terminate }}

  generate-allure-report:
    name: Generate Allure Report
    needs: run-dspace-simulation-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results
      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline --save-dev
          allure generate allure-results -o allure-report --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: reports/${{ github.run_id }}
          keep_files: true
      - name: Add Report Link to Summary
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "### 🔍 Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "📊 <a href=\"https://${{ github.repository_owner }}.github.io/${REPO_NAME}/reports/${{ github.run_id }}\" target=\"_blank\">View report</a>" >> $GITHUB_STEP_SUMMARY
