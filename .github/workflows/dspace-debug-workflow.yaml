name: dSPACE Debug Workflow

on:
  workflow_dispatch:
    inputs:
      runner-label:
        description: 'Runner label to use'
        type: string
        required: true
      uv:
        description: 'Python uv path'
        type: string
        required: false
        default: 'PythonSDK/Turnlamp'
      test:
        description: 'Python test path'
        type: string
        required: false
        default: 'tests/test_turnlamp.py'
      openta-testenv-config:
        description: 'OpenTA test environment config path'
        type: string
        required: false
        default: 'tests/testdata_turnlamp/testenv_veos.yaml'

permissions:
  contents: write
  actions: write
  checks: write
  pages: write
  id-token: write

jobs:
  do-dspace-job:
    name: Do dSPACE job on the Runner
    runs-on: ${{ inputs.runner-label }}
    steps:
      - name: Verify Git Installation
        shell: powershell
        run: |
          Write-Host "Verifying Git installation..."
          git --version
          if ($LASTEXITCODE -ne 0) {
            throw "Git is not properly installed or not in PATH"
          }

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Register VEOS and Run pytest with allure reporting
        shell: powershell
        run: |
          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          cd "${{ inputs.uv }}"
          uv sync
          uv run pytest "${{ inputs.test }}" --openta-testenv-config="${{ inputs.openta-testenv-config }}" --alluredir=allure-results

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: ${{ inputs.uv }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  generate-allure-report:
    name: Generate Allure Report
    needs: do-dspace-job
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Get Run ID
        id: run-id
        run: echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-2.25.0.tgz
          sudo tar -zxvf allure-2.25.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.25.0/bin/allure /usr/bin/allure

      - name: Generate Report
        run: |
          mkdir -p allure-report
          mkdir -p allure-report/${{ steps.run-id.outputs.run_id }}
          allure generate allure-results --clean -o allure-report/${{ steps.run-id.outputs.run_id }}

      - name: Create index.html
        run: |
          echo "<html><head><title>Allure Reports</title></head><body><h1>Allure Reports</h1><p>Latest run: <a href='${{ steps.run-id.outputs.run_id }}'>${{ steps.run-id.outputs.run_id }}</a></p></body></html>" > allure-report/index.html

      - name: Upload Report
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: allure-report

  deploy-pages:
    name: Deploy Allure Report to GitHub Pages
    needs: generate-allure-report
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
