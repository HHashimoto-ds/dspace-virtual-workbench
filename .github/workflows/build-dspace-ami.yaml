name: Build dSPACE AMI

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.build-ami.outputs.ami_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Install Packer
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y packer

      - name: Build AMI
        id: build-ami
        run: |
          echo "Initializing Packer..."
          packer init config/dspace-ami.pkr.hcl
          
          echo "Building AMI..."
          packer build -color=false -machine-readable config/dspace-ami.pkr.hcl | tee packer-output.log
          
          echo "Extracting AMI ID..."
          AMI_ID=$(grep 'artifact,0,id' packer-output.log | cut -d, -f6 | cut -d: -f2)
          if [ -z "$AMI_ID" ]; then
            echo "Failed to get AMI ID from Packer build output"
            exit 1
          fi
          echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT
          echo "Built AMI ID: ${AMI_ID}"

      - name: Verify Fleet Manager Installation
        run: |
          echo "Waiting for AMI to be available..."
          aws ec2 wait image-available --image-ids ${{ steps.build-ami.outputs.ami_id }}
          
          echo "Launching test instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ steps.build-ami.outputs.ami_id }} \
            --instance-type t2.medium \
            --iam-instance-profile Name=SSMInstanceProfile \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=fleet-manager-test}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          
          echo "Waiting for SSM Agent to be online (max 5 minutes)..."
          for i in {1..30}; do
            if aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query 'InstanceInformationList[0].PingStatus' --output text | grep -q "Online"; then
              echo "SSM Agent is online!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for SSM Agent to come online"
              exit 1
            fi
            sleep 10
          done
          
          echo "Testing Fleet Manager connection..."
          if ! aws ssm start-session --target $INSTANCE_ID --document-name AWS-StartInteractiveCommand --parameters command="whoami" 2>&1 | grep -q "Administrator"; then
            echo "Failed to connect via Fleet Manager"
            exit 1
          fi
          
          echo "Cleaning up test instance..."
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          
          echo "Fleet Manager verification completed successfully!"
