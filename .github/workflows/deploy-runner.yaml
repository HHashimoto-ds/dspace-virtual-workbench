name: Deploy Windows Runner

on:
  workflow_dispatch:
    inputs:
      github_repo:
        description: 'GitHub repository URL'
        required: true
        type: string
      runner_token:
        description: 'GitHub Runner Token'
        required: true
        type: string
      runner_labels:
        description: 'Runner Labels (comma-separated)'
        required: false
        type: string
        default: 'windows'
      ami_id:
        description: 'AMI ID to deploy'
        required: true
        type: string
      instance_type:
        description: 'EC2 Instance Type'
        required: false
        type: string
        default: 't2.medium'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create User Data Script
        id: userdata
        run: |
          cat << 'EOF' > userdata.ps1
          <powershell>
          # Configure PEM key for Fleet Manager
          $pemKey = "${{ secrets.FLEET_MANAGER_PEM }}"
          New-Item -Path "C:\SSM" -ItemType Directory -Force
          Set-Content -Path "C:\SSM\instance-key.pem" -Value $pemKey
          icacls "C:\SSM\instance-key.pem" /inheritance:r
          icacls "C:\SSM\instance-key.pem" /grant:r "SYSTEM:(R)" /grant:r "Administrators:(R)"

          # Configure GitHub Runner
          $GitHubUrl = "${{ inputs.github_repo }}"
          $RunnerToken = "${{ inputs.runner_token }}"
          $Labels = @(${{ inputs.runner_labels }}.Split(','))

          # Execute runner configuration script
          C:\actions-runner\configure-runner.ps1 -GitHubUrl $GitHubUrl -RunnerToken $RunnerToken -Labels $Labels
          </powershell>
          EOF
          
          USERDATA=$(base64 -w0 userdata.ps1)
          echo "userdata=${USERDATA}" >> $GITHUB_OUTPUT

      - name: Deploy EC2 Instance
        id: deploy
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ inputs.ami_id }} \
            --instance-type ${{ inputs.instance_type }} \
            --iam-instance-profile Name=SSMInstanceProfile \
            --user-data ${{ steps.userdata.outputs.userdata }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=github-runner}]' \
            --region ${{ env.AWS_REGION }} \
            --output json \
            --query 'Instances[0].InstanceId' \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "Failed to get Instance ID from EC2 run-instances output"
            exit 1
          fi

          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          echo "Deployed Instance ID: ${INSTANCE_ID}"

          # Wait for instance to be running
          echo "Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ env.AWS_REGION }}
          
          # Get instance public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          if [ -z "$PUBLIC_IP" ]; then
            echo "Failed to get Public IP from EC2 describe-instances output"
            exit 1
          fi

          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
          echo "Instance Public IP: ${PUBLIC_IP}"
