name: dSPACE Virtual Workbench CI Demo

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  checks: write
  pages: write
  id-token: write

jobs:
  build-controller-model:
    name: Build Controller Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build Controller Model
        run: |
          echo "Building controller model..."
          # Add your build commands here
      - name: Add Build Information to Summary
        run: |
          echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "Controller model built successfully." >> $GITHUB_STEP_SUMMARY

  build-plant-model:
    name: Build Plant Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build Plant Model
        run: |
          echo "Building plant model..."
          # Add your build commands here
      - name: Add Build Information to Summary
        run: |
          echo "### 🌱 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "Plant model built successfully." >> $GITHUB_STEP_SUMMARY


  job-1-start-runner:
    name: Job 1 - Start One-Time EC2 Windows Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Windows Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-windows-ec2-runner
        with:
          runner-labels: job-1-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0dc0f13e8dbac09d4   # Windows TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-1-dspace-simulation-and-test:
    name: Job 1 - dSPACE Simulation and Test
    needs:
      - job-1-start-runner
    runs-on: job-1-dspace-simulation-and-test-${{ github.run_id }} # run the job on the newly created runner with this label
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python uv directory | \`PythonSDK/Turnlamp\` |"
            echo "| 📝 Python test script path | \`tests/test_turnlamp.py\` |"
            echo "| ⚙️ OpenTA test environment config | \`tests/testdata_turnlamp/testenv_veos.yaml\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"

          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          # Start VEOS
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          
          # Run pytest with Allure Results
          cd PythonSDK/Turnlamp
          uv sync
          uv run pytest tests/test_turnlamp.py --openta-testenv-config=tests/testdata_turnlamp/testenv_veos.yaml --alluredir=allure-results

          # exit 1    # means failure result
          # exit 0    # means success result

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-1-allure-results
          path: PythonSDK/Turnlamp/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-1-stop-runner:
    name: Job 1 - Stop EC2 Runner
    needs:
      - job-1-start-runner
      - job-1-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-1-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-1-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: false # true


  job-2-start-runner:
    name: Job 2 - Start One-Time EC2 Windows Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Windows Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-windows-ec2-runner
        with:
          runner-labels: job-2-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0dc0f13e8dbac09d4   # Windows TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-2-dspace-simulation-and-test:
    name: Job 2 - dSPACE Simulation and Test
    needs:
      - job-2-start-runner
    runs-on: job-2-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python uv directory | \`PythonSDK/ScbT\` |"
            echo "| 📝 Python test script path | \`tests/test_scbt.py\` |"
            echo "| ⚙️ OpenTA test environment config | \`tests/testdata_scbt/testenv_asm_veos.yaml\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"

          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          # Start VEOS
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          
          # Run pytest with Allure Results
          cd PythonSDK/ScbT
          uv sync
          uv run pytest tests/test_scbt.py --openta-testenv-config=tests/testdata_scbt/testenv_asm_veos.yaml --alluredir=allure-results

          # exit 1    # means failure result
          # exit 0    # means success result

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-2-allure-results
          path: PythonSDK/ScbT/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-2-stop-runner:
    name: Job 2 - Stop EC2 Runner
    needs:
      - job-2-start-runner
      - job-2-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-2-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-2-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: false # true


  job-3-start-runner:
    name: Job 3 - Start One-Time EC2 Windows Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Windows Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-windows-ec2-runner
        with:
          runner-labels: job-3-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0dc0f13e8dbac09d4   # Windows TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-3-dspace-simulation-and-test:
    name: Job 3 - dSPACE Simulation and Test
    needs:
      - job-3-start-runner
    runs-on: job-3-dspace-simulation-and-test-${{ github.run_id }} # run the job on the newly created runner with the same label
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|--------|"
            echo "| 📂 Python uv directory | \`PythonSDK/Turnlamp\` |"
            echo "| 📝 Python test script path | \`tests/test_turnlamp_all_pass.py\` |"
            echo "| ⚙️ OpenTA test environment config | \`tests/testdata_turnlamp/testenv_veos.yaml\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"

          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          # Start VEOS
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          
          # Run pytest with Allure Results
          cd PythonSDK/Turnlamp
          uv sync
          uv run pytest tests/test_turnlamp_all_pass.py --openta-testenv-config=tests/testdata_turnlamp/testenv_veos.yaml --alluredir=allure-results

          # exit 1    # means failure result
          # exit 0    # means success result

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-3-allure-results
          path: PythonSDK/Turnlamp/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-3-stop-runner:
    name: Job 3 - Stop EC2 Runner
    needs:
      - job-3-start-runner
      - job-3-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-3-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-3-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: false # true


  job-4-start-runner:
    name: Job 4 - Start One-Time EC2 Windows Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Windows Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-windows-ec2-runner
        with:
          runner-labels: job-4-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: subnet-011f87ebb7a15fd7b   # ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: "sg-03aa61710262686b2 sg-024c16ce1ce623651 sg-027c6aa7aeb00eb25"   # ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: SSMInstanceProfile # ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: TMC_SYNECT    # ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0b61740a996730ce5   # dSPACE_ToolChainDemo_Client
          instance-type: c7a.2xlarge
          ebs-volume-size: 150
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-4-dspace-simulation-and-test:
    name: Job 4 - dSPACE Simulation and Test (Legacy)
    needs:
      - job-4-start-runner
    runs-on: job-4-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: powershell
        run: |
          @"
          ### 🧪 Test Information
          | Parameter | Value |
          |-----------|-------|
          | 📝 Zipped dSPACE Files  | ``LegacyToolChain/Git_dSPACE_ToolChainDemo.zip`` |
          | 📝 AutomationDesk Project File | ``LegacyToolChain/Automation/AUD_ENG_PKG/Project/AUD_PKG.adpx`` |
          | 📝 MainTestDataFilePath | ``TaData/ExcelInputFiles/MOTMAN/MOTMAN_MainTestData`` |
          | 📝 TAConfigurationFilePath | ``TaData/ExcelInputFiles/MOTMAN/MOTMAN_TA_Configuration`` |
          | ⚙️ ScenarioName | ``MOTMAN-01`` |
          | ⚙️ OptionalApplName | ``DummyPlant_Motor`` |
          | ⚙️ ExperimentName | ``Experiment_MotorECU`` |
          "@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
                    
      - name: Run AutomationDesk
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"

          $script = @"
          import win32com.client
          import pythoncom
          import os
          import sys
          import logging
          import zipfile

          # Add reference to assembly and import it:
          import clr
          clr.AddReference('dSPACE.Common.MessageReader')
          from dSPACE.Common.MessageHandler.Logging import *
          import System

          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )

          # dSPACE Release log configuration
          # Configure products and start time whose messages to read
          settings = MessageReaderSettings()
          settings.SetProducts(['ControlDesk', 'AutomationDesk', 'VEOS'])
          settings.MessageTimeAfter = System.DateTime.UtcNow
          # Create message reader
          reader = MessageReader(settings)

          # Get GITHUB WORKSPACE Path
          github_workspace = os.environ['GITHUB_WORKSPACE']

          try:
              pythoncom.CoInitialize()

              logging.info(f"Starting ControlDesk")
              cdn_app = None
              for i in range(3):  # Retry up to 3 times
                  logging.info(f"Attempt {i+1} to start ControlDesk")
                  try:
                      cdn_app = win32com.client.Dispatch('ControlDeskNG.Application')
                      break  # Exit loop if successful
                  except Exception as e:
                      logging.error(f"Failed to start ControlDesk: {e}")
              else:
                  logging.error("Could not start AutomationDesk after 3 attempts")
                  sys.exit(1)
            
              logging.info(f"Starting AutomationDesk")
              aud_app = None
              for i in range(3):  # Retry up to 3 times
                  logging.info(f"Attempt {i+1} to start AutomationDesk")
                  try:
                      aud_app = win32com.client.Dispatch('AutomationDesk.TAM')
                      break  # Exit loop if successful
                  except Exception as e:
                      logging.error(f"Failed to start AutomationDesk: {e}")
              else:
                  logging.error("Could not start AutomationDesk after 3 attempts")
                  sys.exit(1)

              # Convert relative path to absolute path and normalize slashes
              zip_abspath = os.path.abspath(os.path.join(os.environ['GITHUB_WORKSPACE'], os.environ['ZIPPED_DSPACE_FILES'])).replace('/', '\\')
              aud_project_abspath = os.path.join(os.environ['GITHUB_WORKSPACE'], os.environ['AUD_PROJECT_FILE']).replace('/', '\\')
              cdn_project_abspath = os.path.join(os.environ['GITHUB_WORKSPACE'], 'LegacyToolChain/Instrumentation/Project/Project.CDP').replace('/', '\\')
              
              # ZIP ファイルと同じディレクトリに展開
              logging.info(f"Extracting zip: {zip_abspath}")
              extract_dir = os.path.dirname(zip_abspath)
              with zipfile.ZipFile(zip_abspath, 'r') as zip_ref:
                  zip_ref.extractall(extract_dir)

              # Open CDN Project and activate Experiment
              logging.info(f"Opening CDN Project: {cdn_project_abspath}")
              cdn_app.OpenProject(cdn_project_abspath)
              cdn_app.ActiveProject.Experiments.Item(os.environ['EXPERIMENT_NAME']).Activate()
              
              # Open AUD Project
              logging.info(f"Opening AUD Project: {aud_project_abspath}")
              aud_project = aud_app.Projects.Load(aud_project_abspath)
              
              # Set Data Object Values in AUD Sequence
              logging.info(f"Setting Data Object in AUD Project: {aud_project_abspath}")
              aud_sequence = aud_project.SubBlocks.Item('AutomatedSequence')
              aud_sequence.DataObjects.FindElement('SYNECT_Connection.UseSYNECT').Value = False
              aud_sequence.DataObjects.FindElement('SYNECT_Connection.MainTestDataFilePath').Value = os.environ['MAIN_TEST_DATA_FILE_PATH']
              aud_sequence.DataObjects.FindElement('SYNECT_Connection.TAConfigurationFilePath').Value = os.environ['TA_CONFIGURATION_FILE_PATH']
              aud_sequence.DataObjects.FindElement('SYNECT_Connection.ScenarioName').Value = os.environ['CSENARIO_NAME']
              aud_sequence.DataObjects.FindElement('SYNECT_Connection.OptionalApplName').Value = os.environ['OPTIONAL_APPL_NAME']

              # Start Online Calibration in CDN
              logging.info(f"Starting Online Calibration in CDN")
              cdn_app.CalibrationManagement.StartOnlineCalibration()

              # Run AUD Sequence
              logging.info(f"Running Sequence in AUD Project: {aud_project_abspath}")
              aud_app.Options.Execution.CreateResult = True
              audResult = aud_sequence.Execute()
              audVerdict = audResult.ResultState.Verdict
              aud_project.Save()
              aud_project.Close()

              # Stop Online Calibration in CDN
              logging.info(f"Stopping Online Calibration in CDN")
              cdn_app.CalibrationManagement.StopOnlineCalibration()

              # Close AUD              
              logging.info("Closing AutomationDesk")
              aud_app.Quit()
              aud_app = None

              # Close CDN
              logging.info("Closing ControlDesk")
              cdn_app.Quit(True)  # True = save changes
              cdn_app = None

              # Verdict
              VERDICT_MAP = ['Executed', 'Passed', 'Undefined', 'Failed', 'Error']
              logging.info(f'AutomationDesk verdict is {VERDICT_MAP[audVerdict]}')
              if audVerdict in (0, 1): # if AUD verdict is 'Executed' or 'Passed'
                  sys.exit(0)
              else: # (2, 3, 4) # elif 'Undefined' or 'Failed' or 'Error'
                  sys.exit(1)
              
          except Exception as e:
              logging.error(f"Error in AutomationDesk: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
              
          finally:
              pythoncom.CoUninitialize()

          # print time and text of each dSPACE Release message
          SEVERITY_ENUM = {0: 'Trace', 1: 'Info', 2: 'Warning', 3: 'Error', 4: 'SevereError', 5: 'SystemError', 6: 'Question', 7: 'Advice'}
          msgs = '\n'.join([''] + ['[%s][%s][%s] %s' % (msg.TimeStamp, msg.Session.ProductName, SEVERITY_ENUM[msg.Severity], str(msg.MessageText.encode('utf-8'))) 
                        for msg in reader.ReadMessages()])
          logging.info(msgs)
          # dispose AUD message reader
          reader.Dispose()
          "@

          # Set environment variables for the Python script
          $env:ZIPPED_DSPACE_FILES = "LegacyToolChain/Git_dSPACE_ToolChainDemo.zip"
          $env:AUD_PROJECT_FILE = "LegacyToolChain/Automation/AUD_ENG_PKG/Project/AUD_PKG.adpx"
          $env:MAIN_TEST_DATA_FILE_PATH = "TaData/ExcelInputFiles/MOTMAN/MOTMAN_MainTestData"
          $env:TA_CONFIGURATION_FILE_PATH = "TaData/ExcelInputFiles/MOTMAN/MOTMAN_TA_Configuration"
          $env:SCENARIO_NAME = "MOTMAN-01"
          $env:OPTIONAL_APPL_NAME = "DummyPlant_Motor"
          $env:EXPERIMENT_NAME = "Experiment_MotorECU"
          
          # Run Python script
          $scriptPath = "$env:GITHUB_WORKSPACE\\start_aud.py"
          $script | Out-File -FilePath $scriptPath -Encoding UTF8
          python $scriptPath

          # exit 1    # means failure result
          # exit 0    # means success result

      # - name: Upload Allure Results
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   continue-on-error: true
      #   with:
      #     name: job-4-allure-results
      #     path: PythonSDK/ScbT/allure-results
      #     retention-days: 30
      #     if-no-files-found: warn

  job-4-stop-runner:
    name: Job 4 - Stop EC2 Runner
    needs:
      - job-4-start-runner
      - job-4-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-4-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-4-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: true


  generate-allure-report:
    name: Generate Allure Report
    needs: [job-1-dspace-simulation-and-test, job-2-dspace-simulation-and-test, job-3-dspace-simulation-and-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Job 1 Allure Results
        uses: actions/download-artifact@v4
        with:
          name: job-1-allure-results
          path: allure-results/job1

      - name: Download Job 2 Allure Results
        uses: actions/download-artifact@v4
        with:
          name: job-2-allure-results
          path: allure-results/job2

      - name: Download Job 3 Allure Results
        uses: actions/download-artifact@v4
        with:
          name: job-3-allure-results
          path: allure-results/job3

      # - name: Download Job 4 Allure Results
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: job-4-allure-results
      #     path: allure-results/job4

      - name: Merge Allure Results
        run: |
          mkdir -p merged-results
          cp -r allure-results/job1/* merged-results/
          cp -r allure-results/job2/* merged-results/
          cp -r allure-results/job3/* merged-results/
      #    cp -r allure-results/job4/* merged-results/

      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline --save-dev
          allure generate merged-results -o allure-report --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: reports/${{ github.run_id }}
          keep_files: true
      - name: Add Report Link to Summary
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "### 🔍 Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "📊 <a href=\"https://${{ github.repository_owner }}.github.io/${REPO_NAME}/reports/${{ github.run_id }}\" target=\"_blank\">View report</a>" >> $GITHUB_STEP_SUMMARY
