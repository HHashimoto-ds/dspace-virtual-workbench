name: dSPACE Virtual Workbench CI Demo

on:
  workflow_dispatch:

env:
  JOB_1_PYTHON_SDK_DIR: PythonSDK_Turnlamp
  JOB_1_OPENTA_TESTENV_CONFIG: testdata/testenv_veos_linux.yaml
  JOB_2_PYTHON_SDK_DIR: PythonSDK_Turnlamp_AllPass
  JOB_2_OPENTA_TESTENV_CONFIG: testdata/testenv_veos_linux.yaml
  JOB_3_PYTHON_SDK_DIR: PythonSDK_Turnlamp
  JOB_3_OPENTA_TESTENV_CONFIG: testdata/testenv_veos_vecu_linux.yaml
  JOB_4_PYTHON_SDK_DIR: PythonSDK_Turnlamp_AllPass
  JOB_4_OPENTA_TESTENV_CONFIG: testdata/testenv_veos_linux.yaml

permissions:
  contents: write
  actions: write
  checks: write
  pages: write
  id-token: write

jobs:
  build-controller-model:
    name: Build Controller Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build Controller Model
        run: |
          echo "Building controller model..."
          # Add your build commands here
      - name: Add Build Information to Summary
        run: |
          echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "Controller model built successfully." >> $GITHUB_STEP_SUMMARY

  build-plant-model:
    name: Build Plant Model
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build Plant Model
        run: |
          echo "Building plant model..."
          # Add your build commands here
      - name: Add Build Information to Summary
        run: |
          echo "### 🌱 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "Plant model built successfully." >> $GITHUB_STEP_SUMMARY


  job-1-start-runner:
    name: Job 1 - Start One-Time EC2 Linux Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Linux Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-linux-ec2-runner
        with:
          runner-labels: job-1-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0bb50ff1709190a42   # Linux TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-1-dspace-simulation-and-test:
    name: Job 1 - dSPACE Simulation and Test
    needs:
      - job-1-start-runner
    runs-on: job-1-dspace-simulation-and-test-${{ github.run_id }} # run the job on the newly created runner with this label
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python SDK Directory | \`${{ env.JOB_1_PYTHON_SDK_DIR }}\` |"
            echo "| ⚙️ OpenTA TestEnv Config File | \`${{ env.JOB_1_OPENTA_TESTENV_CONFIG }}\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: bash
        run: |
          echo "Hello dSPACE World!"

          # Add dSPACE license server to CodeMeter Server Search List
          echo "Adding dSPACE license server to CodeMeter Server Search List ..."
          cmu --add-server ${{ vars.AWS_DSPACE_LICENSE_SERVER }}

          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env 
          
          # Register & Start VEOS
          echo "Registering & Starting VEOS ..."
          /opt/dspace/xilapi2024a/MAPort/Main/bin/CmdLoader -rnc 127.0.0.1 -t VEOS -af 0 -start || true          

          # Run pytest with Allure Results
          cd "${{ env.JOB_1_PYTHON_SDK_DIR }}"
          uv sync
          uv run pytest ./tests --openta-testenv-config="${{ env.JOB_1_OPENTA_TESTENV_CONFIG }}" --alluredir=./allure-results
          # exit 1  # failed
          # exit 0  # success

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-1-allure-results
          path: ${{ env.JOB_1_PYTHON_SDK_DIR }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-1-stop-runner:
    name: Job 1 - Stop EC2 Runner
    needs:
      - job-1-start-runner
      - job-1-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-1-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-1-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: true


  job-2-start-runner:
    name: Job 2 - Start One-Time EC2 Linux Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Linux Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-linux-ec2-runner
        with:
          runner-labels: job-2-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0bb50ff1709190a42   # Linux TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-2-dspace-simulation-and-test:
    name: Job 2 - dSPACE Simulation and Test
    needs:
      - job-2-start-runner
    runs-on: job-2-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python SDK Directory | \`${{ env.JOB_2_PYTHON_SDK_DIR }}\` |"
            echo "| ⚙️ OpenTA TestEnv Config File | \`${{ env.JOB_2_OPENTA_TESTENV_CONFIG }}\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: bash
        run: |
          echo "Hello dSPACE World!"

          # Add dSPACE license server to CodeMeter Server Search List
          echo "Adding dSPACE license server to CodeMeter Server Search List ..."
          cmu --add-server ${{ vars.AWS_DSPACE_LICENSE_SERVER }}

          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env 
          
          # Register & Start VEOS
          echo "Registering & Starting VEOS ..."
          /opt/dspace/xilapi2024a/MAPort/Main/bin/CmdLoader -rnc 127.0.0.1 -t VEOS -af 0 -start || true          

          # Run pytest with Allure Results
          cd "${{ env.JOB_2_PYTHON_SDK_DIR }}"
          uv sync
          uv run pytest ./tests --openta-testenv-config="${{ env.JOB_2_OPENTA_TESTENV_CONFIG }}" --alluredir=./allure-results
          # exit 1  # failed
          # exit 0  # success

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-2-allure-results
          path: ${{ env.JOB_2_PYTHON_SDK_DIR }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-2-stop-runner:
    name: Job 2 - Stop EC2 Runner
    needs:
      - job-2-start-runner
      - job-2-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-2-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-2-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: true


  job-3-start-runner:
    name: Job 3 - Start One-Time EC2 Linux Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Linux Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-linux-ec2-runner
        with:
          runner-labels: job-3-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0bb50ff1709190a42   # Linux TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-3-dspace-simulation-and-test:
    name: Job 3 - dSPACE Simulation and Test
    needs:
      - job-3-start-runner
    runs-on: job-3-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python SDK Directory | \`${{ env.JOB_3_PYTHON_SDK_DIR }}\` |"
            echo "| ⚙️ OpenTA TestEnv Config File | \`${{ env.JOB_3_OPENTA_TESTENV_CONFIG }}\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: bash
        run: |
          echo "Hello dSPACE World!"

          # Add dSPACE license server to CodeMeter Server Search List
          echo "Adding dSPACE license server to CodeMeter Server Search List ..."
          cmu --add-server ${{ vars.AWS_DSPACE_LICENSE_SERVER }}

          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env 
          
          # Register & Start VEOS
          echo "Registering & Starting VEOS ..."
          /opt/dspace/xilapi2024a/MAPort/Main/bin/CmdLoader -rnc 127.0.0.1 -t VEOS -af 0 -start || true          

          # Run pytest with Allure Results
          cd "${{ env.JOB_3_PYTHON_SDK_DIR }}"
          uv sync
          uv run pytest ./tests --openta-testenv-config="${{ env.JOB_3_OPENTA_TESTENV_CONFIG }}" --alluredir=./allure-results
          # exit 1  # failed
          # exit 0  # success

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-3-allure-results
          path: ${{ env.JOB_3_PYTHON_SDK_DIR }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-3-stop-runner:
    name: Job 3 - Stop EC2 Runner
    needs:
      - job-3-start-runner
      - job-3-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-3-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-3-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: true


  job-4-start-runner:
    name: Job 4 - Start One-Time EC2 Linux Runner
    needs:
      - build-controller-model
      - build-plant-model
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start One-Time EC2 Linux Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-linux-ec2-runner
        with:
          runner-labels: job-4-dspace-simulation-and-test-${{ github.run_id }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          github-repository: ${{ github.repository }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          ami-id: ami-0bb50ff1709190a42   # Linux TA_SDK AMI
          instance-type: t3.2xlarge
          ebs-volume-size: 500
          
      - name: Add Runner Information to Summary
        run: |
          echo "${{ steps.start-ec2-runner.outputs.inputs-markdown }}" >> $GITHUB_STEP_SUMMARY
      - name: Add EC2 Instance Link to Summary
        run: |
          echo "### 🖥️ EC2 Instance Details" >> $GITHUB_STEP_SUMMARY
          echo "📌 <a href=\"https://${{ vars.AWS_REGION }}.console.aws.amazon.com/ec2/home?region=${{ vars.AWS_REGION }}#InstanceDetails:instanceId=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}\" target=\"_blank\">View in AWS Console</a>" >> $GITHUB_STEP_SUMMARY

  job-4-dspace-simulation-and-test:
    name: Job 4 - dSPACE Simulation and Test
    needs:
      - job-4-start-runner
    runs-on: job-4-dspace-simulation-and-test-${{ github.run_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add Test Information to Summary
        shell: bash
        run: |
          {
            echo "### 🧪 Test Information"
            echo
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| 📂 Python SDK Directory | \`${{ env.JOB_4_PYTHON_SDK_DIR }}\` |"
            echo "| ⚙️ OpenTA TestEnv Config File | \`${{ env.JOB_4_OPENTA_TESTENV_CONFIG }}\` |"
          } >> $GITHUB_STEP_SUMMARY
                    
      - name: Run pytest with Allure reporting
        shell: bash
        run: |
          echo "Hello dSPACE World!"

          # Add dSPACE license server to CodeMeter Server Search List
          echo "Adding dSPACE license server to CodeMeter Server Search List ..."
          cmu --add-server ${{ vars.AWS_DSPACE_LICENSE_SERVER }}

          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env 
          
          # Register & Start VEOS
          echo "Registering & Starting VEOS ..."
          /opt/dspace/xilapi2024a/MAPort/Main/bin/CmdLoader -rnc 127.0.0.1 -t VEOS -af 0 -start || true          

          # Run pytest with Allure Results
          cd "${{ env.JOB_4_PYTHON_SDK_DIR }}"
          uv sync
          uv run pytest ./tests --openta-testenv-config="${{ env.JOB_4_OPENTA_TESTENV_CONFIG }}" --alluredir=./allure-results
          # exit 1  # failed
          # exit 0  # success

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: job-4-allure-results
          path: ${{ env.JOB_4_PYTHON_SDK_DIR }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  job-4-stop-runner:
    name: Job 4 - Stop EC2 Runner
    needs:
      - job-4-start-runner
      - job-4-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.job-4-start-runner.outputs.ec2-instance-id }}
          job-result: ${{ needs.job-4-dspace-simulation-and-test.result }}
          shutdown-behavior: terminate
          failed-job-not-terminate: true

  generate-allure-report:
    name: Generate Allure Report
    needs: [job-1-dspace-simulation-and-test, job-2-dspace-simulation-and-test, job-3-dspace-simulation-and-test, job-4-dspace-simulation-and-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Job 1 Allure Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: job-1-allure-results
          path: allure-results/job1

      - name: Download Job 2 Allure Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: job-2-allure-results
          path: allure-results/job2

      - name: Download Job 3 Allure Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: job-3-allure-results
          path: allure-results/job3

      - name: Download Job 4 Allure Results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: job-4-allure-results
          path: allure-results/job4

      - name: Merge Allure Results
        run: |
          mkdir -p merged-results
          for job in job1 job2 job3 job4; do
            if [ -d "allure-results/$job" ] && [ -n "$(ls -A allure-results/$job 2>/dev/null)" ]; then
              cp -r allure-results/$job/* merged-results/
            else
              echo "No results found for $job or directory is empty"
            fi
          done

      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline --save-dev
          allure generate merged-results -o allure-report --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: reports/${{ github.run_id }}
          keep_files: true
      - name: Add Report Link to Summary
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "### 🔍 Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "📊 <a href=\"https://${{ github.repository_owner }}.github.io/${REPO_NAME}/reports/${{ github.run_id }}\" target=\"_blank\">View report</a>" >> $GITHUB_STEP_SUMMARY
