name: On-demand dSPACE AWS Windows Runner

on:
  workflow_dispatch:
    inputs:
      ami-id:
        description: 'Windows Runner AMI ID'
        type: choice
        required: false
        default: 'ami-0bb54149acff6c213' # Replace with your default Windows AMI
        options:
          - 'ami-0bb54149acff6c213'
          - 'ami-0e1cf64385e467ba0'
          - 'ami-0eb9b73605890c2d1'
          - 'ami-0cfdba0116ec18ad9'
      instance-type:
        description: 'EC2 Instance Type (recommended: t3.large or larger)'
        type: choice
        required: false
        default: 't3.large'
        options:
          - 't3.large'
          - 't3.xlarge'
          - 't3.2xlarge'
          - 'm5.large'
          - 'm5.xlarge'
      subnet-id:
        description: 'VPC Subnet ID for the runner'
        type: string
        required: false
        default: 'subnet-0c02234f0685149b9'  # Replace with your default subnet
      security-group-id:
        description: 'Security Group ID (must allow WinRM)'
        type: string
        required: false
        default: 'sg-0a3740d437cb92517'  # Replace with your default security group
      iam-role-name:
        description: 'IAM Role Name (must have EC2 and SSM permissions)'
        type: string
        required: false
        default: 'data-replay-346-AccessInstanceProfile-cCDJrbRcf8M0'  # arn:aws:iam::952832774451:role/dcv-license-2

permissions:
  contents: read
  actions: write
  checks: write

jobs:
  start-runner:
    name: Start self-hosted EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        run: |
          # Get GitHub runner registration token
          TOKEN_RESPONSE=$(curl -sL \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token")
          REGISTRATION_TOKEN=$(echo $TOKEN_RESPONSE | jq -r .token)

          # Set runner label
          RUNNER_LABEL="windows-runner-${{ github.run_id }}"
          echo "RUNNER_LABEL=$RUNNER_LABEL" >> $GITHUB_ENV

          # Create user data script
          USER_DATA="<powershell>
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

          # Configure WinRM
          winrm quickconfig -q
          winrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'
          winrm set winrm/config/service/auth '@{Basic=\"true\"}'

          # Start SSM Agent service and configure automatic startup
          Start-Service -Name AmazonSSMAgent; Set-Service -Name AmazonSSMAgent -StartupType Automatic; Write-Host \"SSM Agent service started and set to automatic startup\"

          # Install and configure GitHub runner
          \$GH_RUNNER_VERSION=\"2.308.0\"

          New-Item -ItemType Directory -Path C:\actions-runner
          Set-Location C:\actions-runner
          Invoke-WebRequest -Uri \"https://github.com/actions/runner/releases/download/v\$GH_RUNNER_VERSION/actions-runner-win-x64-\$GH_RUNNER_VERSION.zip\" -OutFile \"actions-runner.zip\"
          Expand-Archive -Path actions-runner.zip -DestinationPath .

          # Configure and start runner using the registration token
          ./config.cmd --url \"https://github.com/${{ github.repository }}\" --token \"${REGISTRATION_TOKEN}\" --name \"${RUNNER_LABEL}\" --work \"_work\" --runasservice --labels \"windows,aws-ec2\"

          # Start the runner service
          ./svc.ps1 install
          ./svc.ps1 start
          </powershell>"

          # Launch EC2 instance
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id "${{ inputs.ami-id }}" \
            --instance-type "${{ inputs.instance-type }}" \
            --subnet-id "${{ inputs.subnet-id }}" \
            --security-group-ids "${{ inputs.security-group-id }}" \
            --iam-instance-profile "Name=${{ inputs.iam-role-name }}" \
            --user-data "$USER_DATA" \
            --block-device-mappings "[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":500,\"VolumeType\":\"gp3\"}}]" \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${RUNNER_LABEL}},{Key=GitHubRepository,Value=${{ github.repository }}}]" \
            --query 'Instances[0].InstanceId' \
            --output text)

          # Set outputs
          echo "label=${RUNNER_LABEL}" >> $GITHUB_OUTPUT
          echo "ec2-instance-id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
            
  do-the-job:
    name: Do the job on the Runner
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - name: Hello World
        run: echo 'Hello World!'

  stop-runner:
    name: Stop self-hosted EC2 Runner
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done  
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        run: |
          # Terminate EC2 instance
          aws ec2 terminate-instances \
            --instance-ids "${{ needs.start-runner.outputs.ec2-instance-id }}"

          # Get runner ID
          RUNNERS_RESPONSE=$(curl -sL \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runners")
          
          RUNNER_ID=$(echo "$RUNNERS_RESPONSE" | jq -r ".runners[] | select(.name == \"${{ needs.start-runner.outputs.label }}\") | .id")

          # Remove runner if found
          if [ ! -z "$RUNNER_ID" ]; then
            curl -sL \
              -X DELETE \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runners/$RUNNER_ID"
          fi
