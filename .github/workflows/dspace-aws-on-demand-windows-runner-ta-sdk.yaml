name: dSPACE AWS On-Demand Windows Runner TA SDK

on:
  workflow_dispatch:
    inputs:
      ami-id:
        description: 'Windows AMI ID'
        type: choice
        required: false
        default: 'ami-0dc0f13e8dbac09d4'
        options:
          - 'ami-0cfdba0116ec18ad9' # Windows with dSPACE ControlDesk
          - 'ami-03f341346ac05fc46' # Windows_Server-2022-English-Full-Base-2025.07.09
          - 'ami-0dc0f13e8dbac09d4' # Windows TA_SDK AMI
      instance-type:
        description: 'EC2 Instance Type (recommended: t3.large or larger)'
        type: choice
        required: false
        default: 't3.2xlarge'
        options:
          - 't3.large'
          - 't3.xlarge'
          - 't3.2xlarge'
          - 'm5.large'
          - 'm5.xlarge'
      shutdown-behavior:
        description: 'Shutdown Behavior for EC2 Instance'
        type: choice
        required: false
        default: 'terminate'
        options:
          - 'terminate'
          - 'stop'
      ebs-volume-size:
        description: 'EBS Volume Size in GB (default: 500)'
        type: number
        required: false
        default: 500
      failed-job-not-terminate:
        description: 'Do NOT terminate EC2 Instance when the job fails'
        type: boolean
        required: false
        default: true
      # Add any additional parameters needed for your dSPACE job
      uv:
        description: 'Python uv path'
        type: string
        required: false
        default: 'PythonSDK/Turnlamp' # Replace with your default value
      test:
        description: 'Python test path'
        type: string
        required: false
        default: 'tests/test_turnlamp.py' # Replace with your default value
      openta-testenv-config:
        description: 'OpenTA test environment config path'
        type: string
        required: false
        default: 'tests/testdata_turnlamp/testenv_veos.yaml' # Replace with your default value  

permissions:
  contents: write
  actions: write
  checks: write
  pages: write
  id-token: write

jobs:
  show-inputs:
    name: Show Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Show Inputs
        run: |
          echo "## Workflow Inputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Name | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| AMI ID | \`${{ inputs.ami-id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Instance Type | \`${{ inputs.instance-type }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Shutdown Behavior | \`${{ inputs.shutdown-behavior }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| EBS Volume Size | \`${{ inputs.ebs-volume-size }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed Job Not Terminate | \`${{ inputs.failed-job-not-terminate }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Branch | \`${{ github.ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Repository | \`${{ github.repository }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| UV Path | \`${{ inputs.uv }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Path | \`${{ inputs.test }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| OpenTA Test Environment Config | \`${{ inputs.openta-testenv-config }}\` |" >> $GITHUB_STEP_SUMMARY

  start-runner:
    name: Start One-Time Windows EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Start One-Time Windows EC2 Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-one-time-windows-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ami-id: ${{ inputs.ami-id }}
          instance-type: ${{ inputs.instance-type }}
          subnet-id: ${{ vars.AWS_VPC_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_IDS }}
          iam-instance-profile: ${{ vars.AWS_IAM_INSTANCE_PROFILE_NAME }}
          ebs-volume-size: ${{ inputs.ebs-volume-size }}
          shutdown-behavior: ${{ inputs.shutdown-behavior }}
          key-name: ${{ vars.AWS_SSH_KEY_PAIR_NAME }}
          github-repository: ${{ github.repository }}
          runner-labels: ${{ github.run_id }}-run-dspace-simulation-and-test

  run-dspace-simulation-and-test:
    name: Run dSPACE Simlulation and Test
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ github.run_id }}-run-dspace-simulation-and-test # run the job on the newly created runner with the same label
    steps:
      - name: Verify Git Installation
        shell: powershell
        run: |
          Write-Host "Verifying Git installation..."
          git --version
          if ($LASTEXITCODE -ne 0) {
            throw "Git is not properly installed or not in PATH"
          }

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Only fetch the latest commit to save time

      - name: Hello dSPACE World
        shell: powershell
        run: |
          Write-Host "Hello dSPACE World!"
          # exit 1 # exit with failure
          # exit 0 # exit with success

      - name: Run pytest with Allure reporting
        shell: powershell
        run: |
          powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
          $env:Path = "C:\Users\Administrator\.local\bin;$env:Path"
          
          # Start VEOS
          & 'C:\Program Files\dSPACE XIL API .NET 2024-A\PlatformManagementAPI\Main\bin\CmdLoader.exe' -rnc 127.0.0.1 -t VEOS -af 0 -start
          
          # Run pytest with Allure Results
          cd "${{ inputs.uv }}"
          uv sync
          uv run pytest "${{ inputs.test }}" --openta-testenv-config="${{ inputs.openta-testenv-config }}" --alluredir=allure-results

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: ${{ inputs.uv }}/allure-results
          retention-days: 30
          if-no-files-found: warn

  generate-allure-report:
    name: Generate Allure Report
    needs: run-dspace-simulation-and-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Generate Allure Report
        run: |
          curl -o allure-2.25.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.tgz
          tar -zxvf allure-2.25.0.tgz
          export PATH=$PATH:$PWD/allure-2.25.0/bin
          allure generate allure-results --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: reports/${{ github.run_id }}
          keep_files: true

      - name: Add Report Link to Summary
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "### 🔍 Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View report](https://${{ github.repository_owner }}.github.io/${REPO_NAME}/reports/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  stop-runner:
    name: Stop One-Time Windows EC2 Runner
    needs:
      - start-runner
      - run-dspace-simulation-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Stop EC2 runner
        uses: ./.github/actions/stop-ec2-runner
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
          shutdown-behavior: ${{ inputs.shutdown-behavior }}
          job-result: ${{ needs.run-dspace-simulation-and-test.result }}
          failed-job-not-terminate: ${{ inputs.failed-job-not-terminate }}
