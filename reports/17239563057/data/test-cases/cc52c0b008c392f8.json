{"uid":"cc52c0b008c392f8","name":"test_turnlamp_synchronflash[8]","fullName":"tests.turnlamp.test_synchron_flash_multiport#test_turnlamp_synchronflash","historyId":"85c4dd41ff51b1a2d4e8aee9b4f39be7","time":{"start":1756215103869,"stop":1756215107201,"duration":3332},"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.3s after lever was switched to right.\nassert (1.0420000000000016 - 0.0010000000000047748) <= 0.3","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x761e219163d0>\nbattery_voltage = 8\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp_hybrid\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with (\n            allure.step(\"Act: Start capture and test\"),\n            MultiPortCapturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n    \n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests/turnlamp/test_synchron_flash_multiport.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x761e219163d0>\ncapture = <openta.testing.capturing.MultiPortCapturing object at 0x761e200f4d90>\n\n    def common_evaluation_turnlamp_right_side(\n        ta: TestEnvironmentAccess,\n        capture: MultiPortCapturing | controldesk.Recorder,\n    ):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Create plot of all captured signals and add it to allure report\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n    \n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n            assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\n            # Check if signal changes of turn signal lever has been detected.\n            assert not time_stamps_lever.empty, \"Turn lever should have at least one signal change.\"\n    \n            # Evaluate response time of right lamp after lever has switched\n>           assert time_stamps_right[0] - time_stamps_lever[0] <= expected_response_time, (\n                f\"Right signal should start flashing at least {expected_response_time}s after lever was switched to right.\"\n            )\nE           AssertionError: Right signal should start flashing at least 0.3s after lever was switched to right.\nE           assert (1.0420000000000016 - 0.0010000000000047748) <= 0.3\n\ntests/turnlamp/test_synchron_flash_multiport.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1756214861092,"stop":1756214873840,"duration":12748},"status":"passed","steps":[{"name":"Setup Ports","time":{"start":1756214861168,"stop":1756214873840,"duration":12672},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.3s after lever was switched to right.\nassert (1.0420000000000016 - 0.0010000000000047748) <= 0.3","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x761e219163d0>\nbattery_voltage = 8\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp_hybrid\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with (\n            allure.step(\"Act: Start capture and test\"),\n            MultiPortCapturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n    \n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests/turnlamp/test_synchron_flash_multiport.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x761e219163d0>\ncapture = <openta.testing.capturing.MultiPortCapturing object at 0x761e200f4d90>\n\n    def common_evaluation_turnlamp_right_side(\n        ta: TestEnvironmentAccess,\n        capture: MultiPortCapturing | controldesk.Recorder,\n    ):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Create plot of all captured signals and add it to allure report\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n    \n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n            assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\n            # Check if signal changes of turn signal lever has been detected.\n            assert not time_stamps_lever.empty, \"Turn lever should have at least one signal change.\"\n    \n            # Evaluate response time of right lamp after lever has switched\n>           assert time_stamps_right[0] - time_stamps_lever[0] <= expected_response_time, (\n                f\"Right signal should start flashing at least {expected_response_time}s after lever was switched to right.\"\n            )\nE           AssertionError: Right signal should start flashing at least 0.3s after lever was switched to right.\nE           assert (1.0420000000000016 - 0.0010000000000047748) <= 0.3\n\ntests/turnlamp/test_synchron_flash_multiport.py:78: AssertionError","steps":[{"name":"Arrange: Set initial values and ensure load is connected","time":{"start":1756215103869,"stop":1756215103876,"duration":7},"status":"passed","steps":[{"name":"BatteryVoltage = 8","time":{"start":1756215103869,"stop":1756215103872,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756215103872,"stop":1756215103876,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Act: Start capture and test","time":{"start":1756215103876,"stop":1756215106921,"duration":3045},"status":"passed","steps":[{"name":"TurnSignalLever = 1","time":{"start":1756215103891,"stop":1756215103892,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756215106892,"stop":1756215106895,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert: Get signals and plot","time":{"start":1756215106923,"stop":1756215107201,"duration":278},"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.3s after lever was switched to right.\nassert (1.0420000000000016 - 0.0010000000000047748) <= 0.3\n","statusTrace":"  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp/tests/turnlamp/test_synchron_flash_multiport.py\", line 78, in common_evaluation_turnlamp_right_side\n    assert time_stamps_right[0] - time_stamps_lever[0] <= expected_response_time, (\n","steps":[],"attachments":[{"uid":"ac02a24d55c3dfb7","name":"All signals","source":"ac02a24d55c3dfb7.svg","type":"image/svg+xml","size":48147}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7d1b4f678fbbda8e","name":"log","source":"7d1b4f678fbbda8e.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ta::0","time":{"start":1756215127320,"stop":1756215127354,"duration":34},"status":"passed","steps":[{"name":"Teardown Ports","time":{"start":1756215127320,"stop":1756215127354,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"tag","value":"turnlamp_hybrid"},{"name":"parentSuite","value":"tests.turnlamp"},{"name":"suite","value":"test_synchron_flash_multiport"},{"name":"host","value":"ip-10-2-5-77"},{"name":"thread","value":"4030-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.turnlamp.test_synchron_flash_multiport"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"8"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["turnlamp_hybrid"]},"source":"cc52c0b008c392f8.json","parameterValues":["8"]}