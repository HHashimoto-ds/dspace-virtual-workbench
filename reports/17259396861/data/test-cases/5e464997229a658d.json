{"uid":"5e464997229a658d","name":"test_turnlamp_triggered_mf4file[6]","fullName":"tests.turnlamp.test_synchron_flash#test_turnlamp_triggered_mf4file","historyId":"e053d1e6b403351032be5f71f9aec4f1","time":{"start":1756277311209,"stop":1756277318535,"duration":7326},"status":"failed","statusMessage":"AssertionError: Right signal should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x71978914a090>\nbattery_voltage = 6\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp\n    def test_turnlamp_triggered_mf4file(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n            mf4path = create_temp_mf4_file_path()\n        # #####################################\n        # Act\n        # #####################################\n    \n        with (\n            allure.step(\"Act: Start capture and test\"),\n            Capturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                start_trigger=(\"TurnSignalLever >= 1\", -0.25),\n                stop_trigger=(\"TurnSignalLever <= 0\", 0.75),\n                datafile_path=mf4path,\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            time.sleep(1)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n            # the capture is stopped here,\n            # if the following and its reaction, flashing of left lights, is captured\n            # then the test will fail\n            time.sleep(1)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.LEFT\n            time.sleep(2)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests/turnlamp/test_synchron_flash.py:247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x71978914a090>\ncapture = <openta.testing.capturing.Capturing object at 0x719778144310>\n\n    def common_evaluation_turnlamp_right_side(ta: TestEnvironmentAccess, capture: Capturing):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n>           assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\nE           AssertionError: Right signal should have at least one signal change.\nE           assert not True\nE            +  where True = Index([], dtype='float64').empty\n\ntests/turnlamp/test_synchron_flash.py:68: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1756277216151,"stop":1756277226285,"duration":10134},"status":"passed","steps":[{"name":"Setup Ports","time":{"start":1756277216219,"stop":1756277226285,"duration":10066},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Right signal should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x71978914a090>\nbattery_voltage = 6\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp\n    def test_turnlamp_triggered_mf4file(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n            mf4path = create_temp_mf4_file_path()\n        # #####################################\n        # Act\n        # #####################################\n    \n        with (\n            allure.step(\"Act: Start capture and test\"),\n            Capturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                start_trigger=(\"TurnSignalLever >= 1\", -0.25),\n                stop_trigger=(\"TurnSignalLever <= 0\", 0.75),\n                datafile_path=mf4path,\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            time.sleep(1)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n            # the capture is stopped here,\n            # if the following and its reaction, flashing of left lights, is captured\n            # then the test will fail\n            time.sleep(1)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.LEFT\n            time.sleep(2)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests/turnlamp/test_synchron_flash.py:247: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x71978914a090>\ncapture = <openta.testing.capturing.Capturing object at 0x719778144310>\n\n    def common_evaluation_turnlamp_right_side(ta: TestEnvironmentAccess, capture: Capturing):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n>           assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\nE           AssertionError: Right signal should have at least one signal change.\nE           assert not True\nE            +  where True = Index([], dtype='float64').empty\n\ntests/turnlamp/test_synchron_flash.py:68: AssertionError","steps":[{"name":"Arrange: Set initial values and ensure load is connected","time":{"start":1756277311209,"stop":1756277311212,"duration":3},"status":"passed","steps":[{"name":"BatteryVoltage = 6","time":{"start":1756277311209,"stop":1756277311211,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756277311211,"stop":1756277311212,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Act: Start capture and test","time":{"start":1756277311212,"stop":1756277318305,"duration":7093},"status":"passed","steps":[{"name":"TurnSignalLever = 1","time":{"start":1756277312232,"stop":1756277312234,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756277315235,"stop":1756277315236,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = -1","time":{"start":1756277316236,"stop":1756277316238,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756277318239,"stop":1756277318240,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert: Get signals and plot","time":{"start":1756277318306,"stop":1756277318535,"duration":229},"status":"failed","statusMessage":"AssertionError: Right signal should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty\n","statusTrace":"  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp/tests/turnlamp/test_synchron_flash.py\", line 68, in common_evaluation_turnlamp_right_side\n    assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\n","steps":[],"attachments":[{"uid":"c1bac6a1810f64c3","name":"All signals","source":"c1bac6a1810f64c3.svg","type":"image/svg+xml","size":50455}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"542f42f5074d6693","name":"log","source":"542f42f5074d6693.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":9,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ta::0","time":{"start":1756277474202,"stop":1756277474227,"duration":25},"status":"passed","steps":[{"name":"Teardown Ports","time":{"start":1756277474202,"stop":1756277474227,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"tag","value":"turnlamp"},{"name":"parentSuite","value":"tests.turnlamp"},{"name":"suite","value":"test_synchron_flash"},{"name":"host","value":"ip-10-2-7-189"},{"name":"thread","value":"3214-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.turnlamp.test_synchron_flash"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"6"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["turnlamp"]},"source":"5e464997229a658d.json","parameterValues":["6"]}