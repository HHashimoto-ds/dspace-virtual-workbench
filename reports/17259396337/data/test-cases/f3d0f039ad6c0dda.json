{"uid":"f3d0f039ad6c0dda","name":"test_turnlamp_triggered_synchronflash[8]","fullName":"tests.turnlamp_allpass.test_synchron_flash#test_turnlamp_triggered_synchronflash","historyId":"6f3edbeae6b6f22837ba06c38992a26e","time":{"start":1756277229814,"stop":1756277229814,"duration":0},"status":"broken","statusMessage":"openta.common.exceptions.PortError: Setup of Ports Failed: ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: No valid license found. Vendor Description: The user maximum of the CodeMeter license is reached, Error 212.\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CreateInstance(InstanceType instanceType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortFactory.CreateMAPort(String name)\n␤Failed to create 'Model' XilModelAccessPort","statusTrace":"self = <openta.testing.testenv.TestEnvironmentAccess object at 0x774e51c20e90>\n\n    def setup(self) -> None:\n        try:\n            with allure.step(\"Setup Ports\"):\n                _logger.info(\"Setup Ports\")\n                for port in Registry().get_ports():\n                    port_repr = f\"[{port.order}] '{port.name}' {port.__class__.__name__}\"\n    \n                    if port.state < PortState.CREATED <= port.target_state:\n                        _logger.info(f\"Setup {port_repr}: Create\")\n>                       port.create()\n\n.venv/lib/python3.11/site-packages/openta/testing/testenv.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openta.ports.xilapi_modelaccess.XilModelAccessPort object at 0x774e51bb54d0>\nkwargs = {}\n\n    def create(self, **kwargs: typing.Any) -> None:  # noqa: ANN401, ARG002 # unknown keyword args by design\n        \"\"\"\n        Create maport instance\n        \"\"\"\n        with log_port_lifecycle(_logger, self, \"create\"):\n            # call super create(), to create the testbench beforehand\n            super().create()\n    \n            # create MAPort via testbenches factory\n>           self._port = self.testbench.MAPortFactory.CreateMAPort(self.name)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: No valid license found. Vendor Description: The user maximum of the CodeMeter license is reached, Error 212.\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CreateInstance(InstanceType instanceType, Object[] args)\nE              at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortFactory.CreateMAPort(String name)\nE           Failed to create 'Model' XilModelAccessPort\n\n.venv/lib/python3.11/site-packages/openta/ports/xilapi_modelaccess.py:140: MAPortException_impl\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'ta' for <Function test_turnlamp_synchronflash[6]>>\n\n    @pytest.fixture(scope=\"session\")\n    def ta(request: pytest.FixtureRequest) -> typing.Generator[TestEnvironmentAccess, None, None]:\n        \"\"\"\n        Session scoped pytest fixture setting up the XIL API Framework.\n    \n        Requires either --openta-testenv-config or --openta-xilframework-config option.\n        \"\"\"\n    \n        if \"--collect-only\" not in sys.argv:\n            # Check if config options were provided when fixture is used in a test\n            testenv_config = request.config.getoption(\"--openta-testenv-config\")\n    \n            # but only one of them, they are mutual exclusive\n            if not testenv_config:\n                raise pytest.UsageError(\n                    \"The `ta` fixture requires `--openta-testenv-config` pytest option.\",\n                )\n    \n            # Read the test environment configuration\n            reader = TestEnvironmentConfigReader(testenv_config)  # pyright: ignore[reportArgumentType] : if it is not None, it is str\n            reader.add_to_registry()\n    \n            # and instantiate the TestEnvironmentAccess, which is returned by this fixture,\n            # but used as contextmanager, to setup and teardown configured ports.\n            root = TestEnvironmentAccess()\n    \n            # ensure create/release lifecycle of ports by TestEnvironmentAccess\n>           with root:\n\n.venv/lib/python3.11/site-packages/openta_pytest/plugin.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.11/site-packages/openta/testing/testenv.py:134: in __enter__\n    self.setup()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openta.testing.testenv.TestEnvironmentAccess object at 0x774e51c20e90>\n\n    def setup(self) -> None:\n        try:\n            with allure.step(\"Setup Ports\"):\n                _logger.info(\"Setup Ports\")\n                for port in Registry().get_ports():\n                    port_repr = f\"[{port.order}] '{port.name}' {port.__class__.__name__}\"\n    \n                    if port.state < PortState.CREATED <= port.target_state:\n                        _logger.info(f\"Setup {port_repr}: Create\")\n                        port.create()\n    \n                    # configure\n                    if port.state < PortState.CONNECTED <= port.target_state:\n                        _logger.info(f\"Setup {port_repr}: Connect/Configure\")\n                        port.connect()\n    \n                    # and start if needed\n                    if port.state < PortState.STARTED <= port.target_state:\n                        _logger.info(f\"Setup {port_repr}: Start\")\n                        port.start()\n    \n        except Exception as err:\n            _logger.exception(f\"Setup Ports Failed: {exceptions.format_exc(err)}\")  # noqa: TRY401\n            # Initiate the Tear Down of already set up ports.\n            self.teardown()\n>           raise exceptions.PortError(f\"Setup of Ports Failed: {exceptions.format_exc(err)}\") from err\nE           openta.common.exceptions.PortError: Setup of Ports Failed: ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: No valid license found. Vendor Description: The user maximum of the CodeMeter license is reached, Error 212.\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CreateInstance(InstanceType instanceType, Object[] args)\nE              at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortFactory.CreateMAPort(String name)\nE           ␤Failed to create 'Model' XilModelAccessPort\n\n.venv/lib/python3.11/site-packages/openta/testing/testenv.py:178: PortError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1756277221198,"stop":1756277229647,"duration":8449},"status":"broken","statusMessage":"openta.common.exceptions.PortError: Setup of Ports Failed: ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: No valid license found. Vendor Description: The user maximum of the CodeMeter license is reached, Error 212.\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CreateInstance(InstanceType instanceType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortFactory.CreateMAPort(String name)\n␤Failed to create 'Model' XilModelAccessPort\n","statusTrace":"  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/_pytest/fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta_pytest/plugin.py\", line 73, in ta\n    with root:\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/testing/testenv.py\", line 134, in __enter__\n    self.setup()\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/testing/testenv.py\", line 178, in setup\n    raise exceptions.PortError(f\"Setup of Ports Failed: {exceptions.format_exc(err)}\") from err\n","steps":[{"name":"Setup Ports","time":{"start":1756277221267,"stop":1756277229645,"duration":8378},"status":"broken","statusMessage":"ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: No valid license found. Vendor Description: The user maximum of the CodeMeter license is reached, Error 212.\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CreateInstance(InstanceType instanceType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortFactory.CreateMAPort(String name)\n\nFailed to create 'Model' XilModelAccessPort\n","statusTrace":"  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/testing/testenv.py\", line 162, in setup\n    port.create()\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/ports/xilapi_modelaccess.py\", line 140, in create\n    self._port = self.testbench.MAPortFactory.CreateMAPort(self.name)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Teardown Ports","time":{"start":1756277229647,"stop":1756277229647,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"turnlamp"},{"name":"parentSuite","value":"tests.turnlamp_allpass"},{"name":"suite","value":"test_synchron_flash"},{"name":"host","value":"ip-10-2-4-244"},{"name":"thread","value":"3205-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.turnlamp_allpass.test_synchron_flash"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"8"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["turnlamp"]},"source":"f3d0f039ad6c0dda.json","parameterValues":["8"]}