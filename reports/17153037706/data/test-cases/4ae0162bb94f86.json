{"uid":"4ae0162bb94f86","name":"test_turnlamp_synchronflash[11]","fullName":"tests.turnlamp.test_synchron_flash_multiport#test_turnlamp_synchronflash","historyId":"580703d168fe3128964af9b28d30339a","time":{"start":1755860188919,"stop":1755860192263,"duration":3344},"status":"failed","statusMessage":"AssertionError: Turn lever should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x00000185AFA186D0>\nbattery_voltage = 11\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp_hybrid\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with (\n            allure.step(\"Act: Start capture and test\"),\n            MultiPortCapturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n    \n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests\\turnlamp\\test_synchron_flash_multiport.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x00000185AFA186D0>\ncapture = <openta.testing.capturing.MultiPortCapturing object at 0x00000185B51B1190>\n\n    def common_evaluation_turnlamp_right_side(\n        ta: TestEnvironmentAccess,\n        capture: MultiPortCapturing | controldesk.Recorder,\n    ):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Create plot of all captured signals and add it to allure report\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n    \n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n            assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\n            # Check if signal changes of turn signal lever has been detected.\n>           assert not time_stamps_lever.empty, \"Turn lever should have at least one signal change.\"\nE           AssertionError: Turn lever should have at least one signal change.\nE           assert not True\nE            +  where True = Index([], dtype='float64').empty\n\ntests\\turnlamp\\test_synchron_flash_multiport.py:75: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1755859919193,"stop":1755859947004,"duration":27811},"status":"passed","steps":[{"name":"Setup Ports","time":{"start":1755859919306,"stop":1755859947004,"duration":27698},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Turn lever should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty","statusTrace":"ta = <openta.testing.testenv.TestEnvironmentAccess object at 0x00000185AFA186D0>\nbattery_voltage = 11\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    @pytest.mark.turnlamp_hybrid\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with (\n            allure.step(\"Act: Start capture and test\"),\n            MultiPortCapturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n            # Start blinking -> Turn right\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.RIGHT\n            time.sleep(3)\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n    \n        # Do common check and reporting for usecase \"Turn to right\"\n>       common_evaluation_turnlamp_right_side(ta, capture)\n\ntests\\turnlamp\\test_synchron_flash_multiport.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x00000185AFA186D0>\ncapture = <openta.testing.capturing.MultiPortCapturing object at 0x00000185B51B1190>\n\n    def common_evaluation_turnlamp_right_side(\n        ta: TestEnvironmentAccess,\n        capture: MultiPortCapturing | controldesk.Recorder,\n    ):\n        \"\"\"\n        Common checks (assert) for \"Turn right\" testcase:\n            - Check response time of light after lever has been activated.\n            - Check no flashes at left side\n            - Check at least one flash at right side\n    \n        Plot signals to report:\n            - TurnSignalLever\n            - RightFrontSignal\n            - LeftFrontSignal\n    \n        Params:  ta - TestEnvironmentAccess\n                capture - TA SDK Capture (multiport contextmanager)\n        \"\"\"\n        # Get current value of battery voltage for reporting\n        battery_voltage = ta.vars.BatteryVoltage.value\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Create plot of all captured signals and add it to allure report\n            utils.plot_dataframe_to_report(\n                capture.get_data_frame(),\n                layout=[\n                    \"TurnSignalLever\",\n                    [\"TurnSignalFrontLeft\", \"TurnSignalRearLeft\"],\n                    [\"TurnSignalFrontRight\", \"TurnSignalRearRight\"],\n                ],\n            )\n    \n            # Get captured signals\n            turn_sig_lever = capture.get_signal(ta.vars.TurnSignalLever)\n            front_left_sig = capture.get_signal(ta.vars.TurnSignalFrontLeft)\n            front_right_sig = capture.get_signal(ta.vars.TurnSignalFrontRight)\n    \n            # Get signal changes from measured signals\n            time_stamps_lever = turn_sig_lever[(turn_sig_lever.diff() == 1)].index\n            time_stamps_left = front_left_sig[(front_left_sig.diff() == 1)].index\n            time_stamps_right = front_right_sig[(front_right_sig.diff() == 1)].index\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n            expected_response_time = 0.3\n    \n            # Check if signal changes at right side has been detected.\n            assert not time_stamps_right.empty, \"Right signal should have at least one signal change.\"\n            # Check if signal changes of turn signal lever has been detected.\n>           assert not time_stamps_lever.empty, \"Turn lever should have at least one signal change.\"\nE           AssertionError: Turn lever should have at least one signal change.\nE           assert not True\nE            +  where True = Index([], dtype='float64').empty\n\ntests\\turnlamp\\test_synchron_flash_multiport.py:75: AssertionError","steps":[{"name":"Arrange: Set initial values and ensure load is connected","time":{"start":1755860188920,"stop":1755860188935,"duration":15},"status":"passed","steps":[{"name":"BatteryVoltage = 11","time":{"start":1755860188920,"stop":1755860188933,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1755860188933,"stop":1755860188935,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Act: Start capture and test","time":{"start":1755860188935,"stop":1755860191986,"duration":3051},"status":"passed","steps":[{"name":"TurnSignalLever = 1","time":{"start":1755860188967,"stop":1755860188968,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1755860191969,"stop":1755860191970,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert: Get signals and plot","time":{"start":1755860191987,"stop":1755860192262,"duration":275},"status":"failed","statusMessage":"AssertionError: Turn lever should have at least one signal change.\nassert not True\n +  where True = Index([], dtype='float64').empty\n","statusTrace":"  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK_Turnlamp\\tests\\turnlamp\\test_synchron_flash_multiport.py\", line 75, in common_evaluation_turnlamp_right_side\n    assert not time_stamps_lever.empty, \"Turn lever should have at least one signal change.\"\n","steps":[],"attachments":[{"uid":"fba5f82ebd05514b","name":"All signals","source":"fba5f82ebd05514b.svg","type":"image/svg+xml","size":49788}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"513004b8f6453601","name":"log","source":"513004b8f6453601.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ta::0","time":{"start":1755860202318,"stop":1755860202387,"duration":69},"status":"passed","steps":[{"name":"Teardown Ports","time":{"start":1755860202318,"stop":1755860202387,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"tag","value":"turnlamp_hybrid"},{"name":"parentSuite","value":"tests.turnlamp"},{"name":"suite","value":"test_synchron_flash_multiport"},{"name":"host","value":"EC2AMAZ-SOKTQMS"},{"name":"thread","value":"2484-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.turnlamp.test_synchron_flash_multiport"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"11"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["turnlamp_hybrid"]},"source":"4ae0162bb94f86.json","parameterValues":["11"]}