{"uid":"7f3fe7f6bcb961a1","name":"test_turnlamp_synchronflash[7]","fullName":"tests.turnlamp_allpass.test_synchron_flash#test_turnlamp_synchronflash","historyId":"c1d50c65b1655e474c9c756f155a3b80","time":{"start":1756373148116,"stop":1756373151204,"duration":3088},"status":"broken","statusMessage":"ASAM.XIL.Implementation.Testbench.Common.Error.TestbenchPortException_impl: Could not stop capturing. Vendor Description: The capture thread has been aborted.\nThe real-time application was stopped.\n ---> System.Exception: The capture thread has been aborted.\nThe real-time application was stopped.\n   --- End of inner exception stack trace ---\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.Common.Capturing.Capture.Stop()","statusTrace":"System.Exception: The capture thread has been aborted.\nThe real-time application was stopped.\n\nThe above exception was the direct cause of the following exception:\n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x7303f450be50>\nbattery_voltage = 7\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 12, 1))\n    @pytest.mark.turnlamp\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n>       with (\n            allure.step(\"Act: Start capture and test\"),\n            Capturing(\n                [\n                    ta.vars.BatteryVoltage,\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n\ntests/turnlamp_allpass/test_synchron_flash.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.11/site-packages/openta/testing/capturing.py:134: in __exit__\n    self.stop()\n.venv/lib/python3.11/site-packages/openta/testing/capturing.py:176: in stop\n    self._capture.stop()\n.venv/lib/python3.11/site-packages/openta/ports/xilapi_modelaccess.py:35: in stop\n    super().stop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openta.ports.xilapi_modelaccess.XilModelAccessCapture object at 0x7303f48f7750>\n\n    def stop(self) -> None:\n        \"\"\"\n        stop the capture and store capture result\n        \"\"\"\n>       self.origin.Stop()\nE       ASAM.XIL.Implementation.Testbench.Common.Error.TestbenchPortException_impl: Could not stop capturing. Vendor Description: The capture thread has been aborted.\nE       The real-time application was stopped.\nE        ---> System.Exception: The capture thread has been aborted.\nE       The real-time application was stopped.\nE          --- End of inner exception stack trace ---\nE          at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\nE          at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\nE          at dSPACE.XIL.Testbench.Client.Testbench.Common.Capturing.Capture.Stop()\n\n.venv/lib/python3.11/site-packages/openta/ports/xilapi_base.py:279: TestbenchPortException_impl","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"ASAM.XIL.Implementation.Testbench.Common.Error.TestbenchPortException_impl: Could not stop capturing. Vendor Description: The capture thread has been aborted.\nThe real-time application was stopped.\n ---> System.Exception: The capture thread has been aborted.\nThe real-time application was stopped.\n   --- End of inner exception stack trace ---\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.Common.Capturing.Capture.Stop()","statusTrace":"System.Exception: The capture thread has been aborted.\nThe real-time application was stopped.\n\nThe above exception was the direct cause of the following exception:\n\nta = <openta.testing.testenv.TestEnvironmentAccess object at 0x7303f450be50>\nbattery_voltage = 7\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 12, 1))\n    @pytest.mark.turnlamp\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = constants.TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n>       with (\n            allure.step(\"Act: Start capture and test\"),\n            Capturing(\n                [\n                    ta.vars.BatteryVoltage,\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n                raster_name=\"Periodic Task 1\",\n            ) as capture,\n        ):\n\ntests/turnlamp_allpass/test_synchron_flash.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.11/site-packages/openta/testing/capturing.py:134: in __exit__\n    self.stop()\n.venv/lib/python3.11/site-packages/openta/testing/capturing.py:176: in stop\n    self._capture.stop()\n.venv/lib/python3.11/site-packages/openta/ports/xilapi_modelaccess.py:35: in stop\n    super().stop()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openta.ports.xilapi_modelaccess.XilModelAccessCapture object at 0x7303f48f7750>\n\n    def stop(self) -> None:\n        \"\"\"\n        stop the capture and store capture result\n        \"\"\"\n>       self.origin.Stop()\nE       ASAM.XIL.Implementation.Testbench.Common.Error.TestbenchPortException_impl: Could not stop capturing. Vendor Description: The capture thread has been aborted.\nE       The real-time application was stopped.\nE        ---> System.Exception: The capture thread has been aborted.\nE       The real-time application was stopped.\nE          --- End of inner exception stack trace ---\nE          at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\nE          at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\nE          at dSPACE.XIL.Testbench.Client.Testbench.Common.Capturing.Capture.Stop()\n\n.venv/lib/python3.11/site-packages/openta/ports/xilapi_base.py:279: TestbenchPortException_impl","steps":[{"name":"Arrange: Set initial values and ensure load is connected","time":{"start":1756373148116,"stop":1756373148121,"duration":5},"status":"passed","steps":[{"name":"BatteryVoltage = 7","time":{"start":1756373148116,"stop":1756373148119,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756373148119,"stop":1756373148121,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Act: Start capture and test","time":{"start":1756373148121,"stop":1756373151202,"duration":3081},"status":"broken","statusMessage":"ASAM.XIL.Implementation.Testbench.Common.Error.TestbenchPortException_impl: Could not stop capturing. Vendor Description: The capture thread has been aborted.\nThe real-time application was stopped.\n ---> System.Exception: The capture thread has been aborted.\nThe real-time application was stopped.\n   --- End of inner exception stack trace ---\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\n   at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\n   at dSPACE.XIL.Testbench.Client.Testbench.Common.Capturing.Capture.Stop()\n","statusTrace":"  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/tests/turnlamp_allpass/test_synchron_flash.py\", line 117, in test_turnlamp_synchronflash\n    with (\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/testing/capturing.py\", line 134, in __exit__\n    self.stop()\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/testing/capturing.py\", line 176, in stop\n    self._capture.stop()\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/ports/xilapi_modelaccess.py\", line 35, in stop\n    super().stop()\n  File \"/home/runner/actions-runner/_work/dspace-virtual-workbench/dspace-virtual-workbench/PythonSDK_Turnlamp_AllPass/.venv/lib/python3.11/site-packages/openta/ports/xilapi_base.py\", line 279, in stop\n    self.origin.Stop()\n","steps":[{"name":"TurnSignalLever = 1","time":{"start":1756373148146,"stop":1756373148147,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1756373151148,"stop":1756373151174,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"bfbe848669d619c7","name":"log","source":"bfbe848669d619c7.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"turnlamp"},{"name":"parentSuite","value":"tests.turnlamp_allpass"},{"name":"suite","value":"test_synchron_flash"},{"name":"host","value":"ip-10-2-4-148"},{"name":"thread","value":"3717-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.turnlamp_allpass.test_synchron_flash"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"7"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["turnlamp"]},"source":"7f3fe7f6bcb961a1.json","parameterValues":["7"]}