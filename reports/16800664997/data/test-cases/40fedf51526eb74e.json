{"uid":"40fedf51526eb74e","name":"test_turnlamp_synchronflash[13]","fullName":"tests.test_turnlamp#test_turnlamp_synchronflash","historyId":"7daf2469b4e2884d1d8df09dec9b22ed","time":{"start":1754559896173,"stop":1754559899646,"duration":3473},"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.5 s after lever was switched to right.\nassert ([0.038999999999997925, 1.0399999999999991, 2.040999999999997] and [])","statusTrace":"ta = <openta.common.testenv.TestEnvironmentAccess object at 0x000002BC7C16D850>\nbattery_voltage = 13\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with allure.step(\"Act: Start capture and test\"):\n            # Configure and start capture\n            with Capturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n            ) as capture:\n                # Start blinking -> Turn right\n                ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.RIGHT\n                ta.ports.Model.wait(3)\n                ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Get captured signals as evaluationlib.Signal item\n            turn_sig_lever = capture[ta.vars.TurnSignalLever]\n            front_left_sig = capture[ta.vars.TurnSignalFrontLeft]\n            front_right_sig = capture[ta.vars.TurnSignalFrontRight]\n    \n            # Get signal changes from measured signals\n            time_stamps_lever, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": turn_sig_lever})\n            time_stamps_left, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": front_left_sig})\n            time_stamps_right, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": front_right_sig})\n    \n            # Create plot of all captured signals and add it to report\n            fname = evaluationlib.plotting.plot.plot_signals(\n                [turn_sig_lever, front_left_sig, front_right_sig],\n                [\"TurnSignal Lever\", \"TurnSignal FrontLeft\", \"TurnSignal FrontRight\"],\n                [],\n                \"Turn signals\",\n            )\n            allure.attach.file(fname, name=\"Turn signals\", attachment_type=allure.attachment_type.SVG)\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n    \n            # Evaluate response time if right lamp has flashed\n>           assert time_stamps_right and time_stamps_lever and time_stamps_right[0] - time_stamps_lever[0] <= 0.5, (\n                \"Right signal should start flashing at least 0.5 s after lever was switched to right.\"\n            )\nE           AssertionError: Right signal should start flashing at least 0.5 s after lever was switched to right.\nE           assert ([0.038999999999997925, 1.0399999999999991, 2.040999999999997] and [])\n\ntests\\test_turnlamp.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1754559842804,"stop":1754559870761,"duration":27957},"status":"passed","steps":[{"name":"XIL create ports","time":{"start":1754559842804,"stop":1754559870761,"duration":27957},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.5 s after lever was switched to right.\nassert ([0.038999999999997925, 1.0399999999999991, 2.040999999999997] and [])","statusTrace":"ta = <openta.common.testenv.TestEnvironmentAccess object at 0x000002BC7C16D850>\nbattery_voltage = 13\n\n    @pytest.mark.parametrize(\"battery_voltage\", range(6, 15, 1))\n    def test_turnlamp_synchronflash(ta: TestEnvironmentAccess, battery_voltage: float):\n        # == Arrange ===\n        with allure.step(\"Arrange: Set initial values and ensure load is connected\"):\n            # #####################################\n            # Arrange\n            # #####################################\n            # Set battery voltage due to given parameter\n            ta.vars.BatteryVoltage.value = battery_voltage\n    \n            # Ensure lever is turned OFF\n            ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.OFF\n    \n        # #####################################\n        # Act\n        # #####################################\n        with allure.step(\"Act: Start capture and test\"):\n            # Configure and start capture\n            with Capturing(\n                [\n                    ta.vars.TurnSignalLever,\n                    ta.vars.TurnSignalFrontRight,\n                    ta.vars.TurnSignalFrontLeft,\n                    ta.vars.TurnSignalRearRight,\n                    ta.vars.TurnSignalRearLeft,\n                ],\n            ) as capture:\n                # Start blinking -> Turn right\n                ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.RIGHT\n                ta.ports.Model.wait(3)\n                ta.vars.TurnSignalLever.value = TURNSIGNAL_LEVER.OFF\n    \n        # ##########################################\n        # Prepare Assert and reporting\n        # ##########################################\n        with allure.step(\"Assert: Get signals and plot\"):\n            # Get captured signals as evaluationlib.Signal item\n            turn_sig_lever = capture[ta.vars.TurnSignalLever]\n            front_left_sig = capture[ta.vars.TurnSignalFrontLeft]\n            front_right_sig = capture[ta.vars.TurnSignalFrontRight]\n    \n            # Get signal changes from measured signals\n            time_stamps_lever, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": turn_sig_lever})\n            time_stamps_left, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": front_left_sig})\n            time_stamps_right, _ = evaluationlib.ges.watcher.watch(\"posedge(s, 0.5)\", {\"s\": front_right_sig})\n    \n            # Create plot of all captured signals and add it to report\n            fname = evaluationlib.plotting.plot.plot_signals(\n                [turn_sig_lever, front_left_sig, front_right_sig],\n                [\"TurnSignal Lever\", \"TurnSignal FrontLeft\", \"TurnSignal FrontRight\"],\n                [],\n                \"Turn signals\",\n            )\n            allure.attach.file(fname, name=\"Turn signals\", attachment_type=allure.attachment_type.SVG)\n    \n            # ##########################################\n            # Assert\n            # ##########################################\n    \n            # Evaluate response time if right lamp has flashed\n>           assert time_stamps_right and time_stamps_lever and time_stamps_right[0] - time_stamps_lever[0] <= 0.5, (\n                \"Right signal should start flashing at least 0.5 s after lever was switched to right.\"\n            )\nE           AssertionError: Right signal should start flashing at least 0.5 s after lever was switched to right.\nE           assert ([0.038999999999997925, 1.0399999999999991, 2.040999999999997] and [])\n\ntests\\test_turnlamp.py:99: AssertionError","steps":[{"name":"Arrange: Set initial values and ensure load is connected","time":{"start":1754559896173,"stop":1754559896176,"duration":3},"status":"passed","steps":[{"name":"BatteryVoltage = 13","time":{"start":1754559896173,"stop":1754559896175,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1754559896175,"stop":1754559896176,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Act: Start capture and test","time":{"start":1754559896176,"stop":1754559899246,"duration":3070},"status":"passed","steps":[{"name":"TurnSignalLever = 1","time":{"start":1754559896207,"stop":1754559896208,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"TurnSignalLever = 0","time":{"start":1754559899225,"stop":1754559899226,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert: Get signals and plot","time":{"start":1754559899246,"stop":1754559899646,"duration":400},"status":"failed","statusMessage":"AssertionError: Right signal should start flashing at least 0.5 s after lever was switched to right.\nassert ([0.038999999999997925, 1.0399999999999991, 2.040999999999997] and [])\n","statusTrace":"  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\Turnlamp\\tests\\test_turnlamp.py\", line 99, in test_turnlamp_synchronflash\n    assert time_stamps_right and time_stamps_lever and time_stamps_right[0] - time_stamps_lever[0] <= 0.5, (\n","steps":[],"attachments":[{"uid":"33dd41783f91db4c","name":"Turn signals","source":"33dd41783f91db4c.svg","type":"image/svg+xml","size":86899}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"ta::0","time":{"start":1754559929417,"stop":1754559929474,"duration":57},"status":"passed","steps":[{"name":"XIL release port.","time":{"start":1754559929417,"stop":1754559929474,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_turnlamp"},{"name":"host","value":"EC2AMAZ-S34TCCF"},{"name":"thread","value":"5360-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_turnlamp"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"battery_voltage","value":"13"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"40fedf51526eb74e.json","parameterValues":["13"]}