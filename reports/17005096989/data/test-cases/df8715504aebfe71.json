{"uid":"df8715504aebfe71","name":"test_NCAP_AEB_CCRb_1_explicit_parameters[0-60]","fullName":"tests.test_scbt#test_NCAP_AEB_CCRb_1_explicit_parameters","historyId":"36e3f243ac504b2570469584ea08c2ae","time":{"start":1755324986323,"stop":1755324986323,"duration":0},"description":"\n    Test of Autonomous Emergency Braking, in the Car to car rear braking scenario.\n    The scenario parameters for the ego vehicle velocity and the distance to its fellow vehicle is parameterized.\n    Parameter Variation is full factorial. All combinations of specified parameter values are applied by pytest.\n    ","descriptionHtml":"<pre><code>Test of Autonomous Emergency Braking, in the Car to car rear braking scenario.\nThe scenario parameters for the ego vehicle velocity and the distance to its fellow vehicle is parameterized.\nParameter Variation is full factorial. All combinations of specified parameter values are applied by pytest.\n</code></pre>\n","status":"broken","statusMessage":"openta.common.exceptions.PortConfigError: Failed to configure XIL MAPort.","statusTrace":"self = <openta.xil.ports.ma_port.MAPort object at 0x000001BF728CF810>\nkwargs = {}\nport_config_file = 'C:\\\\actions-runner\\\\_work\\\\dspace-virtual-workbench\\\\dspace-virtual-workbench\\\\PythonSDK\\\\ScbT\\\\tests\\\\testdata_scbt\\\\asmtraffic\\\\MAPortConfig.xml'\nport_config = <dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortConfig object at 0x000001BF72898640>\nforce_config = True\n\n    def connect(self, **kwargs: typing.Any) -> None:\n        \"\"\"\n        Load port configuratio file and configure port.\n        \"\"\"\n        port_config_file = self.get_option([\"port_config_file\", \"PortConfigurationFile\"], kwargs, raise_error=True)\n        try:\n            port_config = self.origin.LoadConfiguration(port_config_file)\n        except Exception as err:\n            raise exceptions.PortConfigError(\n                f\"Cannot configure XIL MAPort. Cannot load config file '{port_config_file}'. :: {traceback.format_exception_only(err)}\"\n            ) from err\n    \n        # Configure the XIL API MAPort\n        force_config = bool(self.get_option([\"force_config\", \"ForceConfig\"], kwargs, default=False))\n        try:\n            logger.info(\"Connect maport '%s'\", self.name)\n>           self.origin.Configure(port_config, force_config)\nE           ASAM.XIL.Implementation.Testbench.MAPort.Error.MAPortException_impl: Port configuration could not be completed successfully Vendor Description: Download of application 'C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\tests\\testdata_scbt\\asmtraffic\\./VEOS/ASM_Traffic.sdf' failed.\r\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CheckAndThrowException(ServiceException exception)\r\nE              at dSPACE.XIL.Testbench.Client.CommonServiceAccess.CallMethod(Guid guid, InstanceType instanceType, String methodName, CallType callType, Object[] args)\r\nE              at dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPort.Configure(IMAPortConfig config, Boolean forceConfig)\n\n.venv\\Lib\\site-packages\\openta\\xil\\ports\\ma_port.py:79: MAPortException_impl\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'ta' for <Function test_NCAP_AEB_CCRb_1_explicit_parameters[0-50]>>\n\n    @pytest.fixture(scope=\"session\")\n    def ta(request: pytest.FixtureRequest) -> typing.Generator[TestEnvironmentAccess, None, None]:\n        \"\"\"\n        Session scoped pytest fixture setting up the XIL API Framework.\n    \n        Requires either --openta-testenv-config or --openta-xilframework-config option.\n        \"\"\"\n        # Check if config options were provided when fixture is used in a test\n        testenv_config = request.config.getoption(\"--openta-testenv-config\")\n        xil_framework_config = request.config.getoption(\"--openta-xilframework-config\")\n    \n        if not testenv_config and not xil_framework_config:\n            raise pytest.UsageError(\n                \"The 'ta' fixture requires either --openta-testenv-config or --openta-xilframework-config option\",\n            )\n    \n        root = TestEnvironmentAccess()\n    \n        # ensure create/release lifecycle of ports by TestEnvironmentAccess\n>       with root:\n\n.venv\\Lib\\site-packages\\openta_pytest\\plugin.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\openta\\common\\testenv.py:25: in __enter__\n    self.setup()\n.venv\\Lib\\site-packages\\openta\\common\\testenv.py:54: in setup\n    port.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <openta.xil.ports.ma_port.MAPort object at 0x000001BF728CF810>\nkwargs = {}\nport_config_file = 'C:\\\\actions-runner\\\\_work\\\\dspace-virtual-workbench\\\\dspace-virtual-workbench\\\\PythonSDK\\\\ScbT\\\\tests\\\\testdata_scbt\\\\asmtraffic\\\\MAPortConfig.xml'\nport_config = <dSPACE.XIL.Testbench.Client.Testbench.MAPort.MAPortConfig object at 0x000001BF72898640>\nforce_config = True\n\n    def connect(self, **kwargs: typing.Any) -> None:\n        \"\"\"\n        Load port configuratio file and configure port.\n        \"\"\"\n        port_config_file = self.get_option([\"port_config_file\", \"PortConfigurationFile\"], kwargs, raise_error=True)\n        try:\n            port_config = self.origin.LoadConfiguration(port_config_file)\n        except Exception as err:\n            raise exceptions.PortConfigError(\n                f\"Cannot configure XIL MAPort. Cannot load config file '{port_config_file}'. :: {traceback.format_exception_only(err)}\"\n            ) from err\n    \n        # Configure the XIL API MAPort\n        force_config = bool(self.get_option([\"force_config\", \"ForceConfig\"], kwargs, default=False))\n        try:\n            logger.info(\"Connect maport '%s'\", self.name)\n            self.origin.Configure(port_config, force_config)\n        except Exception as err:\n>           raise exceptions.PortConfigError(\"Failed to configure XIL MAPort.\") from err\nE           openta.common.exceptions.PortConfigError: Failed to configure XIL MAPort.\n\n.venv\\Lib\\site-packages\\openta\\xil\\ports\\ma_port.py:81: PortConfigError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"ta","time":{"start":1755324960325,"stop":1755324986085,"duration":25760},"status":"broken","statusMessage":"openta.common.exceptions.PortConfigError: Failed to configure XIL MAPort.\n","statusTrace":"  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta_pytest\\plugin.py\", line 113, in ta\n    with root:\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta\\common\\testenv.py\", line 25, in __enter__\n    self.setup()\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta\\common\\testenv.py\", line 54, in setup\n    port.connect()\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta\\xil\\ports\\ma_port.py\", line 81, in connect\n    raise exceptions.PortConfigError(\"Failed to configure XIL MAPort.\") from err\n","steps":[{"name":"XIL create ports","time":{"start":1755324960326,"stop":1755324986082,"duration":25756},"status":"broken","statusMessage":"openta.common.exceptions.PortConfigError: Failed to configure XIL MAPort.\n","statusTrace":"  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta\\common\\testenv.py\", line 54, in setup\n    port.connect()\n  File \"C:\\actions-runner\\_work\\dspace-virtual-workbench\\dspace-virtual-workbench\\PythonSDK\\ScbT\\.venv\\Lib\\site-packages\\openta\\xil\\ports\\ma_port.py\", line 81, in connect\n    raise exceptions.PortConfigError(\"Failed to configure XIL MAPort.\") from err\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_scbt"},{"name":"host","value":"EC2AMAZ-DGVJ804"},{"name":"thread","value":"2284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_scbt"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"d_Fellow","value":"0"},{"name":"v_EGO","value":"60"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"df8715504aebfe71.json","parameterValues":["0","60"]}